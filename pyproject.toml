[project]
name = "name"
version = "0.2.0"
description = "describe"
readme = "README.md"
requires-python = ">=3.10, <3.13"
license = { text = "AGPL-3.0" }
authors = [{ name = "name", email = "" }]
maintainers = [{ name = "Gareth Simons", email = "" }]
keywords = [
  "network-topology",
  "architecture",
  "urban-planning",
  "python3",
  "networkx",
  "networks",
  "spatial-analysis",
  "geographical-information-system",
  "spatial-data",
  "morphometrics",
  "network-analysis",
  "spatial-data-analysis",
  "centrality",
  "shapely",
  "landuse",
  "network-centralities",
]
classifiers = [
  "Programming Language :: Python :: 3.10",
  "Programming Language :: Python :: 3.11",
]
dependencies = [
    "geopandas>=0.13.2",
    "pyarrow>=12.0.1",
    "fastparquet>=2023.7.0",
    "ipykernel>=6.25.0",
    "networkx>=3.1",
    "pandas>=2.0.3",
    "shapely>=2.0.3",
    "tqdm>=4.65.0",
    "asyncpg>=0.28.0",
    "python-dotenv>=1.0.0",
    "pyproj>=3.6.1",
    "psycopg2-binary>=2.9.7",
    "sqlalchemy>=2.0.19",
    "geoalchemy2>=0.14.1",
    "cityseer>=4.15.1",
    "rasterio>=1.3.8",
    "rasterstats>=0.19.0",
    "momepy>=0.7.0",
    "matplotlib>=3.8.0",
    "descartes>=1.1.0",
    "osmnx>=1.6.0",
    "fiona>=1.9.5",
    "scipy>=1.11.3",
    "utm>=0.7.0",
    "seaborn>=0.13.2",
    "black[jupyter]>=24.2.0",
    "gdal==3.8.5",
    "overturemaps>=0.8.0",
]
[build-system]
requires = ["pdm-backend"]
build-backend = "pdm.backend"

[tool.black]
line-length = 120
color = true

[tool.pylint.master]
disable = [
  "missing-module-docstring",
  "no-name-in-module",
  "pointless-string-statement",
  "logging-fstring-interpolation",
  "R0801",
]
jobs = 0
output-format = "colorized"

[tool.pylint.basic]
good-names = [
  "a",
  "b",
  "x",
  "y",
  "ax",
  "mu",
  "qs",
  "xs",
  "ys",
  "wt",
]

[tool.pylint.design]
max-args = 10

[tool.pylint.format]
max-line-length = 120

[tool.pyright]
pythonVersion = "3.9"
include = ["src"]
exclude = [
  "**/__pycache__",
  "**/__pypackages__",
  "build",
  "docs",
  "**/temp/",
  "tests/",
  "dist",
  ".venv",
]
typeCheckingMode = "basic"

[tool.pydocstyle]
# http://www.pydocstyle.org/en/stable/error_codes.html
ignore = [
  "D100", # Missing docstring in public module
  "D104", # Missing docstring in public package
  "D200", # One-line docstring should fit on one line with quotes
  "D203", # 1 blank line required before class docstring
  "D401", # First line should be in imperative mood.
  "D403", # First word of the first line should be properly capitalized
  "D212", # Multi-line docstring summary should start at the first line
]
match = "(?!test_).*\\.py"
match_dir = "^(?!(__pypackages__|.venv|build|docs|tests)).*"

[tool.isort]
profile = "black"
skip_gitignore = true
line_length = 120
atomic = true
filter_files = true
src_paths = ["src"]

[tool.pytest.ini_options]
console_output_style = "count"
log_cli = true
log_cli_level = "INFO"
testpaths = ["tests"]
addopts = ""

[tool.pdm.resolution]
allow-prereleases = false

[tool.pdm.dev-dependencies]
dev = [
    "black>=23.7.0",
    "pyright>=1.1.320",
    "pylint>=2.17.5",
    "pytest>=7.4.0",
    "pip>=23.2.1",
    "pandas-stubs>=2.0.2.230605",
    "ipykernel>=6.25.1",
]

[tool.pdm.scripts]
docstyle = "pydocstyle --config=pyproject.toml"
formatting = { shell = "black --config=pyproject.toml ./ && isort --settings-file=pyproject.toml ./" }
typechecks = "pyright ."
linting = "pylint --rcfile=pyproject.toml ./src"
tests = "pytest ./tests"
verify_project = { shell = "pdm run formatting && pdm run linting && pdm run typechecks && pdm run tests" }

